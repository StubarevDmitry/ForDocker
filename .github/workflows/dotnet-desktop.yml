name: CI/CD Pipeline

on:
  push:
    branches: [ "master" ]

env:
  SONAR_PROJECT_KEY: "StubarevDmitry_ForDocker"
  SONAR_ORG: "stubarevdmitry"
  MIN_COVERAGE: "80" # Минимальный порог покрытия 80%
  PROJECT_DIR: "."  # Указывает на корень проекта

jobs:
  sonarcloud-analysis:
    name: SonarCloud Analysis
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install tools
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Find project file (PowerShell)
        id: find-proj
        shell: pwsh
        run: |
          $csproj = Get-ChildItem -Path "${{ env.PROJECT_DIR }}" -Filter *.csproj -Recurse | Select-Object -First 1
          if (-not $csproj) {
            Write-Error "No .csproj file found in ${{ env.PROJECT_DIR }}"
            exit 1
          }
          echo "project-path=$($csproj.FullName)" >> $env:GITHUB_OUTPUT

      - name: Start SonarScanner
        run: |
          dotnet sonarscanner begin `
          /k:"${{ env.SONAR_PROJECT_KEY }}" `
          /o:"${{ env.SONAR_ORG }}" `
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" `
          /d:sonar.cs.vscoveragexml.reportsPaths="**/TestResults/*/coverage.cobertura.xml" `
          /d:sonar.coverage.exclusions="**Test*.cs,**/Program.cs" `
          /d:sonar.qualitygate.wait=true `
          /d:sonar.qualitygate.timeout=600 `
          /d:sonar.coverage.measures.lines.minimum=${{ env.MIN_COVERAGE }}

      - name: Build and Test
        run: |
          dotnet restore "${{ steps.find-proj.outputs.project-path }}"
          dotnet build "${{ steps.find-proj.outputs.project-path }}" --configuration Release --no-restore
          dotnet test "${{ steps.find-proj.outputs.project-path }}" `
            --configuration Release `
            --no-build `
            --collect "Code Coverage" `
            --logger trx `
            --results-directory TestResults

      - name: Convert coverage report
        if: always()
        shell: pwsh
        run: |
          # Проверяем наличие исходного отчета
          $coverageFile = Get-ChildItem -Path "TestResults" -Filter "*.coverage" -Recurse | Select-Object -First 1
          if ($coverageFile) {
            # Конвертируем .coverage в cobertura.xml (пример команды, может потребоваться дополнительная настройка)
            reportgenerator -reports:"$($coverageFile.FullName)" -targetdir:"coveragereport" -reporttypes:Cobertura
          } else {
            Write-Warning "No coverage file found in TestResults directory"
          }

      - name: End SonarScanner
        run: |
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  release:
    name: Release
    needs: sonarcloud-analysis
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm install -g semantic-release
        npm install -D @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/exec

    - name: Run semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npx semantic-release

  docker:
    name: Build image & push
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: read
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Необходимо для работы с тегами
    
    - name: Verify Dockerfile exists
      run: |
        ls -la ForDocker/
        if [ ! -f "ForDocker/Dockerfile" ]; then
          echo "Error: Dockerfile not found in ForDocker/"
          exit 1
        fi
    
    - name: Set lowercase owner and repo
      run: |
        echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV
        echo "REPO_LC=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
        echo "REPO_LC=${REPO_LC,,}" >> $GITHUB_ENV
    
    - name: Login to GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get version
      id: version
      run: |
        # Проверяем наличие тегов
        if git describe --tags --abbrev=0 &>/dev/null; then
          VERSION=$(git describe --tags --abbrev=0)
        else
          # Если тегов нет, используем SHA коммита
          VERSION=${{ github.sha }}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: ForDocker/
        push: true
        tags: |
          ghcr.io/${{ env.OWNER_LC }}/simpleapp:latest
          ghcr.io/${{ env.OWNER_LC }}/simpleapp:${{ github.sha }}
          ghcr.io/${{ env.OWNER_LC }}/simpleapp:${{ steps.version.outputs.version }}
